name: Build Third-Party Dependencies and Ocean Android Apps

on:
  workflow_dispatch:
    inputs:
      abi:
        description: "ABI to build for"
        required: true
        default: "arm64-v8a"
        type: choice
        options:
          - arm64-v8a
          - armeabi-v7a
          - x86
          - x86_64
          - custom
      custom_abi:
        description: "Custom ABI (if 'custom' is selected)"
        required: false
        type: string
      build_config:
        description: "Build configuration (debug or release)"
        required: true
        default: "debug"
        type: choice
        options:
          - debug
          - release
      link_type:
        description: "Link type (static or shared)"
        required: true
        default: "static"
        type: choice
        options:
          - static
          - shared
      android_sdk_version:
        description: "Android SDK Version"
        required: false
        default: "android-35"
        type: string

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Android SDK
        run: |
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" \
            "build-tools;35.0.0" \
            "platforms;${{ inputs.android_sdk_version }}" \
            "ndk;27.0.12077973"

      - name: Restore Third-Party Dependencies Cache
        uses: actions/cache@v3
        with:
          path: /home/runner/work/ocean/ocean/ocean_thirdparty_install_android
          key: thirdparty-${{ runner.os }}-${{ inputs.abi }}-${{ inputs.build_config }}

      - name: Restore Ocean Android Libraries Cache
        uses: actions/cache@v3
        with:
          path: /home/runner/work/ocean/ocean/ocean_install_android
          key: ocean-${{ runner.os }}-${{ inputs.abi }}-${{ inputs.build_config }}

      - name: Check if Third-Party Dependencies Exist
        id: check_thirdparty
        run: |
          if [ -d "/home/runner/work/ocean/ocean/ocean_thirdparty_install_android" ] && [ "$(ls -A /home/runner/work/ocean/ocean/ocean_thirdparty_install_android)" ]; then
            echo "THIRDPARTY_EXISTS=true" >> $GITHUB_ENV
          else
            echo "THIRDPARTY_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Build Third-Party Dependencies (if not cached)
        if: env.THIRDPARTY_EXISTS == 'false'
        run: |
          ./build/cmake/build_thirdparty_android.sh \
            -c ${{ inputs.build_config }} \
            -l ${{ inputs.link_type }} \
            -b "/home/runner/work/ocean/ocean/ocean_build_android/thirdparty" \
            -i "/home/runner/work/ocean/ocean/ocean_thirdparty_install_android" \
            --abi ${{ inputs.abi }} \
            --sdk ${{ inputs.android_sdk_version }}

      - name: Cache Third-Party Dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/ocean/ocean/ocean_thirdparty_install_android
          key: thirdparty-${{ runner.os }}-${{ inputs.abi }}-${{ inputs.build_config }}

      - name: Check if Ocean Android Libraries Exist
        id: check_ocean_lib
        run: |
          if [ -d "/home/runner/work/ocean/ocean/ocean_install_android" ] && [ "$(ls -A /home/runner/work/ocean/ocean/ocean_install_android)" ]; then
            echo "OCEAN_LIB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "OCEAN_LIB_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Build Ocean Android Libraries (if not cached)
        if: env.OCEAN_LIB_EXISTS == 'false'
        shell: bash
        run: |
          ./build/cmake/build_ocean_android.sh \
            -c ${{ inputs.build_config }} \
            -l ${{ inputs.link_type }} \
            -b "/home/runner/work/ocean/ocean/ocean_build_android/ocean" \
            -i "/home/runner/work/ocean/ocean/ocean_install_android" \
            -t "/home/runner/work/ocean/ocean/ocean_thirdparty_install_android" \
            --abi ${{ inputs.abi }} \
            --sdk ${{ inputs.android_sdk_version }}

      - name: Cache Ocean Android Libraries
        uses: actions/cache@v3
        with:
          path: /home/runner/work/ocean/ocean/ocean_install_android
          key: ocean-${{ runner.os }}-${{ inputs.abi }}-${{ inputs.build_config }}

      - name: Build and Upload Android Apps Sequentially
        run: |
          export OCEAN_DEVELOPMENT_PATH=/home/runner/work/ocean/ocean
          for app in \
            "demo/media/videopreview" \
            "demo/tracking/pointtracker" \
            "demo/tracking/featuretracker" \
            "demo/tracking/similaritytracker" \
            "demo/cv/detector/linedetector" \
            "shark"; do
              APP_DIR="$OCEAN_DEVELOPMENT_PATH/build/gradle/application/ocean/$app/android"
              if [ -d "$APP_DIR" ]; then
                cd "$APP_DIR"
                ./gradlew assemble
                cp app/build/outputs/apk/debug/app-debug.apk ocean_${app//\//_}_debug.apk
                cp app/build/outputs/apk/release/app-release.apk ocean_${app//\//_}_release.apk
                gh run upload-artifact --name ocean_${app//\//_}_debug_apk --path ocean_${app//\//_}_debug.apk
                gh run upload-artifact --name ocean_${app//\//_}_release_apk --path ocean_${app//\//_}_release.apk
              else
                echo "Skipping $app as directory does not exist."
              fi
          done
